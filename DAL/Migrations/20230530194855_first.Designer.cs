// <auto-generated />
using System;
using DAL;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DAL.Migrations
{
    [DbContext(typeof(ViolationContext))]
    [Migration("20230530194855_first")]
    partial class first
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("DAL.Models.Application", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AdminComment")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Geolocation")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("PhotoId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<DateTime>("PublicationTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("StatusId")
                        .HasColumnType("int");

                    b.Property<string>("UserComment")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("VehicleColorId")
                        .HasColumnType("int");

                    b.Property<int>("VehicleMarkId")
                        .HasColumnType("int");

                    b.Property<string>("VehicleNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("VehicleTypeId")
                        .HasColumnType("int");

                    b.Property<int?>("VideoId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<int>("ViolationId")
                        .HasColumnType("int");

                    b.Property<DateTime>("ViolationTime")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("PhotoId");

                    b.HasIndex("StatusId");

                    b.HasIndex("UserId");

                    b.HasIndex("VehicleColorId");

                    b.HasIndex("VehicleMarkId");

                    b.HasIndex("VehicleTypeId");

                    b.HasIndex("VideoId");

                    b.HasIndex("ViolationId");

                    b.ToTable("Applications");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AdminComment = "",
                            Geolocation = "dummy",
                            PhotoId = 1,
                            PublicationTime = new DateTime(2023, 5, 30, 0, 0, 0, 0, DateTimeKind.Local),
                            StatusId = 1,
                            UserComment = "",
                            UserId = 1,
                            VehicleColorId = 1,
                            VehicleMarkId = 1,
                            VehicleNumber = "dummy",
                            VehicleTypeId = 1,
                            VideoId = 1,
                            ViolationId = 1,
                            ViolationTime = new DateTime(2023, 5, 30, 0, 0, 0, 0, DateTimeKind.Local)
                        });
                });

            modelBuilder.Entity("DAL.Models.ApplicationStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("ApplicationStatuses");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Status = "Очікується"
                        },
                        new
                        {
                            Id = 2,
                            Status = "Скасовано"
                        },
                        new
                        {
                            Id = 3,
                            Status = "Підтверджено"
                        });
                });

            modelBuilder.Entity("DAL.Models.Photo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("FilePath")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Hash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Photos");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            FileName = "dummy",
                            FilePath = "dummy",
                            Hash = "dummy"
                        });
                });

            modelBuilder.Entity("DAL.Models.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = 2,
                            Name = "User",
                            NormalizedName = "USER"
                        });
                });

            modelBuilder.Entity("DAL.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "a443f59d-5255-493c-86f8-7adccc0e416f",
                            Email = "admin@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@GMAIL.COM",
                            NormalizedUserName = "ADMIN",
                            PasswordHash = "AQAAAAIAAYagAAAAEO/6z5XvonJjDRhfGgGqoWP8BfHunmUKlAQmuG3Wqswhw9nQY0UELGaWbY5oBxV41w==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "Admin"
                        },
                        new
                        {
                            Id = 2,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "59aabb23-8a9b-4a61-8474-f3669c9f81e1",
                            Email = "user@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "USER@GMAIL.COM",
                            NormalizedUserName = "USER",
                            PasswordHash = "AQAAAAIAAYagAAAAEJzQxovnL+CcXXrWXLITJV0Ar3xE2Ak83ZSoJBV9tC820qW8uLdVJM3bHx4XppK8lw==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "User"
                        });
                });

            modelBuilder.Entity("DAL.Models.UserProfile", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("UserProfiles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            FirstName = "Admin",
                            LastName = "Admin"
                        },
                        new
                        {
                            Id = 2,
                            FirstName = "User",
                            LastName = "User"
                        });
                });

            modelBuilder.Entity("DAL.Models.VehicleColor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("VehicleColors");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Type = "Синій"
                        },
                        new
                        {
                            Id = 2,
                            Type = "Білий"
                        },
                        new
                        {
                            Id = 3,
                            Type = "Червоний"
                        },
                        new
                        {
                            Id = 4,
                            Type = "Чорний"
                        },
                        new
                        {
                            Id = 5,
                            Type = "Сріблястий"
                        },
                        new
                        {
                            Id = 6,
                            Type = "Сірий"
                        },
                        new
                        {
                            Id = 7,
                            Type = "Зелений"
                        },
                        new
                        {
                            Id = 8,
                            Type = "Жовтий"
                        },
                        new
                        {
                            Id = 9,
                            Type = "Помаранчевий"
                        },
                        new
                        {
                            Id = 10,
                            Type = "Коричневий"
                        },
                        new
                        {
                            Id = 11,
                            Type = "Фіолетовий"
                        },
                        new
                        {
                            Id = 12,
                            Type = "Рожевий"
                        },
                        new
                        {
                            Id = 13,
                            Type = "Золотий"
                        },
                        new
                        {
                            Id = 14,
                            Type = "Бежевий"
                        },
                        new
                        {
                            Id = 15,
                            Type = "Бірюзовий"
                        },
                        new
                        {
                            Id = 16,
                            Type = "Темно-синій"
                        },
                        new
                        {
                            Id = 17,
                            Type = "Маджента"
                        },
                        new
                        {
                            Id = 18,
                            Type = "Бірюзовий"
                        },
                        new
                        {
                            Id = 19,
                            Type = "Лайм"
                        },
                        new
                        {
                            Id = 20,
                            Type = "Синьо-зелений"
                        });
                });

            modelBuilder.Entity("DAL.Models.VehicleMark", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("VehicleMarks");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Type = "Mazda"
                        },
                        new
                        {
                            Id = 2,
                            Type = "Opel"
                        },
                        new
                        {
                            Id = 3,
                            Type = "Toyota"
                        },
                        new
                        {
                            Id = 4,
                            Type = "Honda"
                        },
                        new
                        {
                            Id = 5,
                            Type = "Ford"
                        },
                        new
                        {
                            Id = 6,
                            Type = "Chevrolet"
                        },
                        new
                        {
                            Id = 7,
                            Type = "Volkswagen"
                        },
                        new
                        {
                            Id = 8,
                            Type = "Nissan"
                        },
                        new
                        {
                            Id = 9,
                            Type = "Hyundai"
                        },
                        new
                        {
                            Id = 10,
                            Type = "BMW"
                        },
                        new
                        {
                            Id = 11,
                            Type = "Mercedes-Benz"
                        },
                        new
                        {
                            Id = 12,
                            Type = "Audi"
                        },
                        new
                        {
                            Id = 13,
                            Type = "Kia"
                        },
                        new
                        {
                            Id = 14,
                            Type = "Subaru"
                        },
                        new
                        {
                            Id = 15,
                            Type = "Lexus"
                        },
                        new
                        {
                            Id = 16,
                            Type = "Mitsubishi"
                        },
                        new
                        {
                            Id = 17,
                            Type = "Suzuki"
                        },
                        new
                        {
                            Id = 18,
                            Type = "Chrysler"
                        },
                        new
                        {
                            Id = 19,
                            Type = "Volvo"
                        },
                        new
                        {
                            Id = 20,
                            Type = "Jaguar"
                        },
                        new
                        {
                            Id = 21,
                            Type = "Land Rover"
                        },
                        new
                        {
                            Id = 22,
                            Type = "Porsche"
                        },
                        new
                        {
                            Id = 23,
                            Type = "Maserati"
                        },
                        new
                        {
                            Id = 24,
                            Type = "Tesla"
                        },
                        new
                        {
                            Id = 25,
                            Type = "Ferrari"
                        },
                        new
                        {
                            Id = 26,
                            Type = "Lamborghini"
                        },
                        new
                        {
                            Id = 27,
                            Type = "Bugatti"
                        },
                        new
                        {
                            Id = 28,
                            Type = "McLaren"
                        },
                        new
                        {
                            Id = 29,
                            Type = "Aston Martin"
                        },
                        new
                        {
                            Id = 30,
                            Type = "Alfa Romeo"
                        },
                        new
                        {
                            Id = 31,
                            Type = "Bentley"
                        },
                        new
                        {
                            Id = 32,
                            Type = "Rolls-Royce"
                        },
                        new
                        {
                            Id = 33,
                            Type = "Fiat"
                        },
                        new
                        {
                            Id = 34,
                            Type = "Jeep"
                        },
                        new
                        {
                            Id = 35,
                            Type = "Dodge"
                        },
                        new
                        {
                            Id = 36,
                            Type = "Peugeot"
                        },
                        new
                        {
                            Id = 37,
                            Type = "Renault"
                        },
                        new
                        {
                            Id = 38,
                            Type = "Citroën"
                        },
                        new
                        {
                            Id = 39,
                            Type = "Seat"
                        },
                        new
                        {
                            Id = 40,
                            Type = "Škoda"
                        },
                        new
                        {
                            Id = 41,
                            Type = "Fiat"
                        },
                        new
                        {
                            Id = 42,
                            Type = "Mini"
                        },
                        new
                        {
                            Id = 43,
                            Type = "Lada"
                        },
                        new
                        {
                            Id = 44,
                            Type = "Saab"
                        },
                        new
                        {
                            Id = 45,
                            Type = "Pontiac"
                        },
                        new
                        {
                            Id = 46,
                            Type = "Hummer"
                        },
                        new
                        {
                            Id = 47,
                            Type = "Acura"
                        },
                        new
                        {
                            Id = 48,
                            Type = "Infiniti"
                        },
                        new
                        {
                            Id = 49,
                            Type = "Cadillac"
                        },
                        new
                        {
                            Id = 50,
                            Type = "Buick"
                        });
                });

            modelBuilder.Entity("DAL.Models.VehicleType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("VehicleTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Type = "Легковий автомобіль"
                        },
                        new
                        {
                            Id = 2,
                            Type = "Мотоцикл"
                        },
                        new
                        {
                            Id = 3,
                            Type = "Квадроцикл"
                        },
                        new
                        {
                            Id = 4,
                            Type = "Вантажівка"
                        });
                });

            modelBuilder.Entity("DAL.Models.Video", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("FilePath")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Hash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Videos");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            FileName = "dummy",
                            FilePath = "dummy",
                            Hash = "dummy"
                        });
                });

            modelBuilder.Entity("DAL.Models.Violation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Violations");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Type = "Паркування у неправильному місці"
                        },
                        new
                        {
                            Id = 2,
                            Type = "Не застібнутий ремінь безпеки"
                        },
                        new
                        {
                            Id = 3,
                            Type = "Перевищення швидкості"
                        },
                        new
                        {
                            Id = 4,
                            Type = "Проїзд на червоне світло"
                        },
                        new
                        {
                            Id = 5,
                            Type = "Керування у стані сп'яніння"
                        },
                        new
                        {
                            Id = 6,
                            Type = "Використання мобільного телефону під час руху"
                        },
                        new
                        {
                            Id = 7,
                            Type = "Керування без дійсного посвідчення водія"
                        },
                        new
                        {
                            Id = 8,
                            Type = "Недотримання пріоритету"
                        },
                        new
                        {
                            Id = 9,
                            Type = "Неправильне паркування"
                        },
                        new
                        {
                            Id = 10,
                            Type = "Хуліганський стиль водіння"
                        },
                        new
                        {
                            Id = 11,
                            Type = "Різке торможення перед попереднім автомобілем"
                        },
                        new
                        {
                            Id = 12,
                            Type = "Недотримання правил включення поворотних сигналів"
                        },
                        new
                        {
                            Id = 13,
                            Type = "Неправильний обгін"
                        },
                        new
                        {
                            Id = 14,
                            Type = "Рух зі знятою реєстрацією"
                        },
                        new
                        {
                            Id = 15,
                            Type = "Рух без страховки"
                        },
                        new
                        {
                            Id = 16,
                            Type = "Невпорядковане зупиняння для пішохода"
                        },
                        new
                        {
                            Id = 17,
                            Type = "Заборонений поворот на 180 градусів"
                        },
                        new
                        {
                            Id = 18,
                            Type = "Рух у зустрічному напрямку"
                        },
                        new
                        {
                            Id = 19,
                            Type = "Рух з тонованими вікнами"
                        },
                        new
                        {
                            Id = 20,
                            Type = "Недотримання включення фар"
                        },
                        new
                        {
                            Id = 21,
                            Type = "Рух зі зупиненою дійсною посвідченням водія"
                        },
                        new
                        {
                            Id = 22,
                            Type = "Невиконання знаків дорожнього руху"
                        },
                        new
                        {
                            Id = 23,
                            Type = "Рух без належного освітлення"
                        },
                        new
                        {
                            Id = 24,
                            Type = "Неправомірна зміна смуги руху"
                        },
                        new
                        {
                            Id = 25,
                            Type = "Рух з тріснутим лобовим склом"
                        },
                        new
                        {
                            Id = 26,
                            Type = "Рух з надмірним шумом"
                        },
                        new
                        {
                            Id = 27,
                            Type = "Недотримання використання дитячого автокрісла"
                        },
                        new
                        {
                            Id = 28,
                            Type = "Невиконання вимог про уступ дороги аварійним службам"
                        },
                        new
                        {
                            Id = 29,
                            Type = "Рух у забороненому напрямку на вулиці з одностороннім рухом"
                        },
                        new
                        {
                            Id = 30,
                            Type = "Недотримання вимог про вимкнення світла фар"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            RoleId = 1
                        },
                        new
                        {
                            UserId = 1,
                            RoleId = 2
                        },
                        new
                        {
                            UserId = 2,
                            RoleId = 2
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("DAL.Models.Application", b =>
                {
                    b.HasOne("DAL.Models.Photo", "Photo")
                        .WithMany()
                        .HasForeignKey("PhotoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DAL.Models.ApplicationStatus", "ApplicationStatus")
                        .WithMany()
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DAL.Models.UserProfile", "User")
                        .WithMany("Applications")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DAL.Models.VehicleColor", "VehicleColor")
                        .WithMany("Applications")
                        .HasForeignKey("VehicleColorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DAL.Models.VehicleMark", "VehicleMark")
                        .WithMany("Applications")
                        .HasForeignKey("VehicleMarkId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DAL.Models.VehicleType", "VehicleType")
                        .WithMany("Applications")
                        .HasForeignKey("VehicleTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DAL.Models.Video", "Video")
                        .WithMany()
                        .HasForeignKey("VideoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DAL.Models.Violation", "Violation")
                        .WithMany("Applications")
                        .HasForeignKey("ViolationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationStatus");

                    b.Navigation("Photo");

                    b.Navigation("User");

                    b.Navigation("VehicleColor");

                    b.Navigation("VehicleMark");

                    b.Navigation("VehicleType");

                    b.Navigation("Video");

                    b.Navigation("Violation");
                });

            modelBuilder.Entity("DAL.Models.UserProfile", b =>
                {
                    b.HasOne("DAL.Models.User", "AppUser")
                        .WithOne("UserProfile")
                        .HasForeignKey("DAL.Models.UserProfile", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AppUser");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.HasOne("DAL.Models.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.HasOne("DAL.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.HasOne("DAL.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.HasOne("DAL.Models.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DAL.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.HasOne("DAL.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DAL.Models.User", b =>
                {
                    b.Navigation("UserProfile");
                });

            modelBuilder.Entity("DAL.Models.UserProfile", b =>
                {
                    b.Navigation("Applications");
                });

            modelBuilder.Entity("DAL.Models.VehicleColor", b =>
                {
                    b.Navigation("Applications");
                });

            modelBuilder.Entity("DAL.Models.VehicleMark", b =>
                {
                    b.Navigation("Applications");
                });

            modelBuilder.Entity("DAL.Models.VehicleType", b =>
                {
                    b.Navigation("Applications");
                });

            modelBuilder.Entity("DAL.Models.Violation", b =>
                {
                    b.Navigation("Applications");
                });
#pragma warning restore 612, 618
        }
    }
}
